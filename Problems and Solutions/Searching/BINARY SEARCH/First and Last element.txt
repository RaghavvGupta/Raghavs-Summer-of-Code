class Solution {
public:
    int first(vector<int>& v, int t, int n){
        int lo = 0, hi = n - 1, val = -1;
        while(lo <= hi){
            int mid = lo + (hi - lo) / 2;
            if (v[mid] == t) 
            {
                val = mid;
                hi = mid - 1;
            }
            else if (v[mid] < t) lo = mid + 1;
            else hi = mid - 1;
        }
        return val;
    }
    int last(vector<int>& v, int t, int n){
        int lo = 0, hi = n - 1, val = -1;
        while(lo <= hi){
            int mid = lo + (hi - lo) / 2;
            if (v[mid] == t) 
            {
                val = mid;
                lo = mid + 1;
            }
            else if (v[mid] < t) lo = mid + 1;
            else hi = mid - 1;
        }
        return val;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> ans = {-1, -1};
        ans[0] = first(nums, target, nums.size());
        ans[1] = last(nums, target, nums.size());
        return ans;
    }
};
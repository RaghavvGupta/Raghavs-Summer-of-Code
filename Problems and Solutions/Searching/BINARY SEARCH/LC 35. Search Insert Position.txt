//	-> BINARY SEARCH
//	-> LEET CODE PROBLEM -> 35. Search Insert Position

PROBLEM STATEMENT

Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4


COMPLETE SOLUTION
TIME COMPLEXITY- O(lg N)

#include<iostream>
using namespace std;

    int bs(int arr[], int n, int target){
        int start =0;
        int end = n - 1;
        while (start <= end){
                int mid = start + (end - start) / 2;
                if(target == arr[mid]){
                    return mid;
                }    
            
            else if(arr[mid - 1] < target && target < arr[mid])
            {
                return mid;
            }
            
            else if(arr[mid] < target && target < arr[mid + 1])
            {
                return mid + 1;
            }
            
            else if (target < arr[mid]){
               end = mid - 1;
           }
            
            else if (target > arr[mid]){
               start = mid + 1;
           }
            
            else if(arr[mid - 1] < target && target < arr[mid])
            {
                return mid;
            }
            
            else if(arr[mid] < target && target < arr[mid + 1])
            {
                return mid + 1;
            }
        }
        return 0;
        
    }



int main(){
    
    int n;
    cin >> n;
    int arr[n];
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    int target;
    cin >> target;
    
    cout << bs(arr, n, target);
    
    
    
    return 0;
}

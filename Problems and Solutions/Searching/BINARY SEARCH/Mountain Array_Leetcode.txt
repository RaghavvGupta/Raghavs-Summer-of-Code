852. Peak Index in a Mountain Array
Easy


Let's call an array arr a mountain if the following properties hold:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... arr[i-1] < arr[i]
arr[i] > arr[i+1] > ... > arr[arr.length - 1]
Given an integer array arr that is guaranteed to be a mountain, return any i 
such that arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].



class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
        int start = 0;
        int end = arr.size() - 1;
        while (start < end){
            int mid = start + (end - start) / 2;
            int next = (mid + 1) % arr.size();
            int prev = (mid + arr.size() - 1) % arr.size();
            if (arr[prev] < arr[mid] && arr[mid] > arr[next]){
                return mid;
            }
            else if(arr[prev] < arr[mid]) start = mid;
            else end = mid;
        }
    return -1;
    }
    
};